from concurrent.futures import ThreadPoolExecutor, as_completed
from pathlib import Path

import pytest
import requests
from pystarport import ports

from .network import setup_custom_mantra
from .utils import build_and_deploy_contract_async

pytestmark = pytest.mark.asyncio


@pytest.fixture(scope="module")
def custom_mantra(tmp_path_factory):
    path = tmp_path_factory.mktemp("exploit")
    yield from setup_custom_mantra(
        path, 26910, Path(__file__).parent / "configs/exploit.jsonnet"
    )


def call(port, params):
    url = f"http://127.0.0.1:{port}"
    rsp = requests.post(url, json=params)
    assert rsp.status_code == 200
    return rsp.json()


async def run_test(provider, concurrent, batch, expect_cb):
    contract = await build_and_deploy_contract_async(
        provider.async_w3, "TestExploitContract"
    )
    param = {
        "jsonrpc": "2.0",
        "method": "eth_call",
        "params": [
            {
                "data": "0x5e67164c",
                "to": contract.address,
            },
            "latest",
        ],
        "id": 1,
    }
    params = []
    for _ in range(batch):
        params.append(param)
    with ThreadPoolExecutor(concurrent) as executor:
        p = ports.evmrpc_port(provider.base_port(0))
        tasks = [executor.submit(call, p, params) for _ in range(0, concurrent)]
        results = [future.result() for future in as_completed(tasks)]
    assert len(results) == concurrent
    for result in results:
        expect_cb(result)


async def test_large_batch(custom_mantra):
    concurrent = 1
    batch = 3

    def expect_cb(result):
        found = False
        for item in result:
            if "error" in item and "batch too large" in str(
                item["error"].get("message", "")
            ):
                found = True
        assert found, "no limit found"

    await run_test(custom_mantra, concurrent, batch, expect_cb)


async def test_large_response(custom_mantra):
    concurrent = 1
    batch = 2

    def expect_cb(result):
        found = False
        for item in result:
            if "error" in item and "response too large" in str(
                item["error"].get("message", "")
            ):
                found = True
        assert found, "no limit found"

    await run_test(custom_mantra, concurrent, batch, expect_cb)


async def test_call(mantra):
    concurrent = 2
    batch = 1

    def expect_cb(result):
        for item in result:
            assert "error" not in item

    await run_test(mantra, concurrent, batch, expect_cb)
