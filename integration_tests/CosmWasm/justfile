# Justfile
# Make sure you have `just` installed: https://github.com/casey/just

set dotenv-load

# Prints the list of recipes.
default:
  @just --list

# Builds the whole project.
build:
  cargo build --release --lib --target wasm32-unknown-unknown

# Build all schemas
schemas:
  scripts/build_schemas.sh

# Tests the whole project.
test:
  cargo test

# Alias to the format recipe.
fmt:
  @just format

# Formats the rust, toml and sh files in the project.
format:
  cargo fmt --all
  find . -type f -iname "*.toml" -print0 | xargs -0 taplo format
  find . -type f -name '*.sh' -exec shfmt -w {} \;

# Runs clippy with the a feature flag if provided.
lint:
  cargo clippy --all -- -D warnings

# Tries to fix clippy issues automatically.
lintfix:
  cargo clippy --fix --allow-staged --allow-dirty --all-features
  just format

# Checks the whole project with all the feature flags.
check-all:
  cargo check --all-features

# Cargo check.
check:
  cargo check

# Cargo clean and update.
refresh:
  cargo clean && cargo update

# Cargo watch.
watch:
  cargo watch -x check

# Watches tests.
watch-test:
  cargo watch -x "nextest run"

# Compiles and optimizes the contracts.
optimize:
  #!/usr/bin/env sh
  if ! command -v wasm-opt &> /dev/null
  then
      echo "wasm-opt could not be found, installing..."
      cargo install wasm-opt --locked
  fi
  if [ ! -d artifacts ]; then
    mkdir -p artifacts
  fi

  # Reference: https://github.com/CosmWasm/optimizer/blob/main/optimize.sh
  echo "Optimizing artifacts ..."
  for WASM in target/wasm32-unknown-unknown/release/*.wasm; do
    [ -e "$WASM" ] || continue # https://superuser.com/a/519493

    echo "Found $WASM"
    OUT_FILENAME=$(basename "$WASM")
    echo "Optimizing $OUT_FILENAME ..."
    wasm-opt -Os "$WASM" -o "artifacts/$OUT_FILENAME"
  done

  echo "Post-processing artifacts..."
  (
    cd artifacts

    if test -n "$(find . -maxdepth 1 -name '*.wasm' -print -quit)"; then
      sha256sum -- *.wasm | tee checksums.txt
    else
      echo "Warn: No .wasm file built. Check your build configuration in Cargo.toml."
    fi
  )

  echo "Done."

# Prints the artifacts versions on the current commit.
get-artifacts-versions:
  scripts/get_artifacts_versions.sh --skip-verbose

# Prints the artifacts size. Optimize should be called before.
get-artifacts-size:
  scripts/check_artifacts_size.sh

# Stores artifacts on chain.
store ARTIFACT='':
  @scripts/store_artifact.sh {{ARTIFACT}}

# Instantiates contracts.
instantiate code_id instantiate_msg label *args:
  @scripts/instantiate_contract.sh \
    -c {{code_id}} \
    -i '{{instantiate_msg}}' \
    -l {{label}} {{args}}


# Tests contracts on chain.
test-on-chain RPC CHAIN_ID DENOM BINARY WALLET:
  @scripts/test.sh -r {{RPC}} -c {{CHAIN_ID}} -d {{DENOM}} -b {{BINARY}} -w {{WALLET}}
